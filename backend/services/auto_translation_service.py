#!/usr/bin/env python3
"""
üåê Auto Translation Service - Servicio de Traducci√≥n Autom√°tica
Integraci√≥n transparente con Suno para traducir prompts autom√°ticamente
El usuario ve prompts en espa√±ol, pero se env√≠an en ingl√©s a Suno
"""

import logging
from typing import Dict, List, Optional, Tuple
from ..prompt_translator import auto_translate_for_suno, translator

logger = logging.getLogger(__name__)

class AutoTranslationService:
    """Servicio de traducci√≥n autom√°tica para Suno"""
    
    def __init__(self):
        self.enabled = True
        self.fallback_to_original = True
        
        # Prompts predefinidos en espa√±ol con sus traducciones
        self.predefined_prompts = {
            # G√©neros musicales
            "rock energ√©tico con guitarra el√©ctrica": "energetic rock with electric guitar",
            "balada rom√°ntica con piano": "romantic ballad with piano",
            "reggaeton moderno con bajo potente": "modern reggaeton with powerful bass",
            "jazz suave con saxof√≥n": "smooth jazz with saxophone",
            "pop comercial pegadizo": "catchy commercial pop",
            "trap urbano con sintetizadores": "urban trap with synthesizers",
            "cumbia colombiana tradicional": "traditional colombian cumbia",
            "salsa brava con trompetas": "salsa brava with trumpets",
            "bachata sensual con guitarra": "sensual bachata with guitar",
            "merengue festivo y bailable": "festive and danceable merengue",
            
            # Emociones y estilos
            "canci√≥n triste y melanc√≥lica": "sad and melancholic song",
            "tema alegre y festivo": "happy and festive song",
            "m√∫sica relajante y tranquila": "relaxing and calm music",
            "ritmo en√©rgico y motivador": "energetic and motivating rhythm",
            "ambiente nost√°lgico y emotivo": "nostalgic and emotional atmosphere",
            "sonido agresivo y potente": "aggressive and powerful sound",
            "melod√≠a dulce y rom√°ntica": "sweet and romantic melody",
            "beat urbano y moderno": "urban and modern beat",
            
            # Instrumentos
            "con guitarra ac√∫stica": "with acoustic guitar",
            "con bater√≠a potente": "with powerful drums",
            "con bajo el√©ctrico": "with electric bass",
            "con piano cl√°sico": "with classical piano",
            "con viol√≠n emotivo": "with emotional violin",
            "con trompeta brillante": "with bright trumpet",
            "con saxof√≥n suave": "with smooth saxophone",
            "con sintetizadores modernos": "with modern synthesizers",
        }
    
    def process_prompt_for_suno(self, spanish_prompt: str, show_translation: bool = False) -> Dict[str, str]:
        """
        Procesar prompt para Suno: traducir autom√°ticamente pero mostrar original al usuario
        
        Args:
            spanish_prompt: Prompt en espa√±ol del usuario
            show_translation: Si mostrar la traducci√≥n al usuario (debug)
            
        Returns:
            Dict con prompt original y traducido
        """
        try:
            # Verificar si hay traducci√≥n predefinida
            english_prompt = self.predefined_prompts.get(spanish_prompt.lower())
            
            if not english_prompt:
                # Usar el traductor autom√°tico
                english_prompt = auto_translate_for_suno(spanish_prompt)
            
            result = {
                "original": spanish_prompt,  # Lo que ve el usuario
                "translated": english_prompt,  # Lo que se env√≠a a Suno
                "success": True,
                "predefined": spanish_prompt.lower() in self.predefined_prompts
            }
            
            if show_translation:
                result["show_translation"] = True
            
            logger.info(f"Prompt procesado: '{spanish_prompt}' -> '{english_prompt}'")
            return result
            
        except Exception as e:
            logger.error(f"Error procesando prompt: {e}")
            return {
                "original": spanish_prompt,
                "translated": spanish_prompt if self.fallback_to_original else "",
                "success": False,
                "error": str(e)
            }
    
    def process_batch_prompts(self, spanish_prompts: List[str]) -> List[Dict[str, str]]:
        """Procesar m√∫ltiples prompts"""
        results = []
        for prompt in spanish_prompts:
            result = self.process_prompt_for_suno(prompt)
            results.append(result)
        return results
    
    def get_spanish_prompt_suggestions(self, category: str = "all") -> List[str]:
        """
        Obtener sugerencias de prompts en espa√±ol para mostrar al usuario
        """
        suggestions = {
            "generos": [
                "rock energ√©tico con guitarra el√©ctrica",
                "balada rom√°ntica con piano",
                "reggaeton moderno con bajo potente",
                "jazz suave con saxof√≥n",
                "pop comercial pegadizo",
                "trap urbano con sintetizadores",
                "cumbia colombiana tradicional",
                "salsa brava con trompetas"
            ],
            "emociones": [
                "canci√≥n triste y melanc√≥lica",
                "tema alegre y festivo",
                "m√∫sica relajante y tranquila",
                "ritmo en√©rgico y motivador",
                "ambiente nost√°lgico y emotivo",
                "sonido agresivo y potente",
                "melod√≠a dulce y rom√°ntica"
            ],
            "instrumentos": [
                "con guitarra ac√∫stica",
                "con bater√≠a potente",
                "con bajo el√©ctrico",
                "con piano cl√°sico",
                "con viol√≠n emotivo",
                "con trompeta brillante",
                "con saxof√≥n suave",
                "con sintetizadores modernos"
            ]
        }
        
        if category == "all":
            all_suggestions = []
            for cat_suggestions in suggestions.values():
                all_suggestions.extend(cat_suggestions)
            return all_suggestions
        
        return suggestions.get(category, [])
    
    def add_custom_translation(self, spanish: str, english: str) -> bool:
        """Agregar traducci√≥n personalizada"""
        try:
            self.predefined_prompts[spanish.lower()] = english
            logger.info(f"Traducci√≥n personalizada agregada: '{spanish}' -> '{english}'")
            return True
        except Exception as e:
            logger.error(f"Error agregando traducci√≥n personalizada: {e}")
            return False
    
    def get_translation_stats(self) -> Dict:
        """Obtener estad√≠sticas de traducci√≥n"""
        return {
            "predefined_count": len(self.predefined_prompts),
            "cache_size": len(translator.translation_cache),
            "enabled": self.enabled,
            "fallback_enabled": self.fallback_to_original
        }
    
    def generate_spanish_prompt_buttons(self) -> List[Dict[str, str]]:
        """
        Generar botones de prompts en espa√±ol para la interfaz
        Estos se muestran al usuario y se traducen autom√°ticamente
        """
        buttons = [
            # G√©neros populares
            {"text": "üé∏ Rock Energ√©tico", "prompt": "rock energ√©tico con guitarra el√©ctrica y bater√≠a potente"},
            {"text": "üíï Balada Rom√°ntica", "prompt": "balada rom√°ntica con piano y cuerdas emotivas"},
            {"text": "üî• Reggaeton Moderno", "prompt": "reggaeton moderno con bajo potente y sintetizadores"},
            {"text": "üé∑ Jazz Suave", "prompt": "jazz suave con saxof√≥n y piano relajante"},
            {"text": "‚≠ê Pop Comercial", "prompt": "pop comercial pegadizo con melod√≠a memorable"},
            {"text": "üèôÔ∏è Trap Urbano", "prompt": "trap urbano con sintetizadores y hi-hats r√°pidos"},
            
            # Estilos latinos
            {"text": "üá®üá¥ Cumbia Colombiana", "prompt": "cumbia colombiana tradicional con acorde√≥n"},
            {"text": "üíÉ Salsa Brava", "prompt": "salsa brava con trompetas y percusi√≥n latina"},
            {"text": "üåπ Bachata Sensual", "prompt": "bachata sensual con guitarra y bongos"},
            {"text": "üéâ Merengue Festivo", "prompt": "merengue festivo y bailable con acorde√≥n"},
            
            # Emociones
            {"text": "üò¢ Canci√≥n Triste", "prompt": "canci√≥n triste y melanc√≥lica con piano solo"},
            {"text": "üòä Tema Alegre", "prompt": "tema alegre y festivo con instrumentos brillantes"},
            {"text": "üßò M√∫sica Relajante", "prompt": "m√∫sica relajante y tranquila para meditar"},
            {"text": "üí™ Ritmo Motivador", "prompt": "ritmo en√©rgico y motivador para entrenar"},
            
            # Instrumentos destacados
            {"text": "üé∏ Guitarra Ac√∫stica", "prompt": "canci√≥n folk con guitarra ac√∫stica principal"},
            {"text": "üéπ Piano Cl√°sico", "prompt": "pieza instrumental con piano cl√°sico emotivo"},
            {"text": "üé∫ Trompeta Brillante", "prompt": "tema festivo con trompeta brillante y secci√≥n de vientos"},
            {"text": "üéª Viol√≠n Emotivo", "prompt": "melod√≠a emotiva con viol√≠n y orquesta de cuerdas"}
        ]
        
        return buttons

# Instancia global del servicio
auto_translation_service = AutoTranslationService()

# Funciones de conveniencia
def process_prompt_for_suno(spanish_prompt: str) -> Dict[str, str]:
    """Funci√≥n de conveniencia para procesar prompts"""
    return auto_translation_service.process_prompt_for_suno(spanish_prompt)

def get_spanish_prompt_buttons() -> List[Dict[str, str]]:
    """Funci√≥n de conveniencia para obtener botones de prompts"""
    return auto_translation_service.generate_spanish_prompt_buttons()
