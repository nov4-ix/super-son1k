import React, { useState, useEffect } from 'react';
import './IntuitiveMusicGenerator.css';

const IntuitiveMusicGenerator = ({ services }) => {
  const [isGenerating, setIsGenerating] = useState(false);
  const [currentStep, setCurrentStep] = useState(1);
  const [generatedAudio, setGeneratedAudio] = useState(null);
  const [progress, setProgress] = useState(0);
  
  // Estados para el formulario intuitivo - PROMPT ABIERTO
  const [creativePrompt, setCreativePrompt] = useState('');
  const [tempo, setTempo] = useState(128);
  const [duration, setDuration] = useState(30);
  const [lyrics, setLyrics] = useState('');
  const [voiceStyle, setVoiceStyle] = useState('none');
  const [isGeneratingLyrics, setIsGeneratingLyrics] = useState(false);
  const [isGeneratingPrompt, setIsGeneratingPrompt] = useState(false);
  const [advancedSettings, setAdvancedSettings] = useState({
    key: 'C',
    timeSignature: '4/4',
    reverb: 0.3,
    delay: 0.1,
    distortion: 0.0
  });

  // Inspiraciones creativas (no limitantes)
  const creativeInspirations = {
    emotions: {
      title: 'Emociones',
      items: ['melanc√≥lico', 'euforia', 'nostalgia', 'misterio', 'tranquilidad', 'pasi√≥n', 'nostalgia', 'esperanza']
    },
    atmospheres: {
      title: 'Atm√≥sferas',
      items: ['ciberpunk', 'retro-futurista', 'apocal√≠ptico', 'et√©reo', 'urbano', 'espacial', 'submarino', 'des√©rtico']
    },
    textures: {
      title: 'Texturas',
      items: ['cristalino', 'granuloso', 'fluido', 'met√°lico', 'org√°nico', 'sint√©tico', 'vintage', 'futurista']
    },
    movements: {
      title: 'Movimientos',
      items: ['ascendente', 'descendente', 'circular', 'err√°tico', 'fluido', 'rob√≥tico', 'org√°nico', 'mec√°nico']
    }
  };

  // Funci√≥n para traducir texto al ingl√©s para mejor calidad en Suno
  const translateToEnglish = async (text) => {
    try {
      // Diccionario de traducciones musicales comunes
      const translations = {
        'melanc√≥lico': 'melancholic',
        'euforia': 'euphoria',
        'nostalgia': 'nostalgia',
        'misterio': 'mystery',
        'tranquilidad': 'tranquility',
        'pasi√≥n': 'passion',
        'esperanza': 'hope',
        'ciberpunk': 'cyberpunk',
        'retro-futurista': 'retro-futuristic',
        'apocal√≠ptico': 'apocalyptic',
        'et√©reo': 'ethereal',
        'urbano': 'urban',
        'espacial': 'spatial',
        'submarino': 'underwater',
        'des√©rtico': 'desert',
        'cristalino': 'crystalline',
        'granuloso': 'grainy',
        'fluido': 'fluid',
        'met√°lico': 'metallic',
        'org√°nico': 'organic',
        'sint√©tico': 'synthetic',
        'vintage': 'vintage',
        'futurista': 'futuristic',
        'ascendente': 'ascending',
        'descendente': 'descending',
        'circular': 'circular',
        'err√°tico': 'erratic',
        'rob√≥tico': 'robotic',
        'mec√°nico': 'mechanical',
        'sintetizadores': 'synthesizers',
        'piano': 'piano',
        'guitarra': 'guitar',
        'viol√≠n': 'violin',
        'bater√≠a': 'drums',
        'bajo': 'bass',
        'cuerdas': 'strings',
        'voz': 'voice',
        'coro': 'choir',
        'orquesta': 'orchestra',
        'jazz': 'jazz',
        'blues': 'blues',
        'rock': 'rock',
        'pop': 'pop',
        'cl√°sica': 'classical',
        'electr√≥nica': 'electronic',
        'ambient': 'ambient',
        'experimental': 'experimental',
        'lento': 'slow',
        'r√°pido': 'fast',
        'medio': 'medium',
        'suave': 'soft',
        'fuerte': 'strong',
        'agresivo': 'aggressive',
        'tranquilo': 'calm',
        'energ√©tico': 'energetic',
        'rom√°ntico': 'romantic',
        '√©pico': 'epic',
        'dram√°tico': 'dramatic',
        'm√≠stico': 'mystical',
        'oscuro': 'dark',
        'brillante': 'bright',
        'profundo': 'deep',
        'superficial': 'shallow',
        'complejo': 'complex',
        'simple': 'simple',
        'minimalista': 'minimalist',
        'maximalista': 'maximalist'
      };

      // Traducir palabras clave comunes
      let translatedText = text;
      Object.entries(translations).forEach(([spanish, english]) => {
        const regex = new RegExp(`\\b${spanish}\\b`, 'gi');
        translatedText = translatedText.replace(regex, english);
      });

      // Traducir frases comunes
      const phraseTranslations = {
        'una canci√≥n': 'a song',
        'm√∫sica': 'music',
        'melod√≠a': 'melody',
        'ritmo': 'rhythm',
        'armon√≠a': 'harmony',
        'instrumental': 'instrumental',
        'con': 'with',
        'sin': 'without',
        'que evoque': 'that evokes',
        'que capture': 'that captures',
        'que transmita': 'that conveys',
        'atm√≥sfera': 'atmosphere',
        'estilo': 'style',
        'g√©nero': 'genre',
        'tempo': 'tempo',
        'duraci√≥n': 'duration',
        'minutos': 'minutes',
        'segundos': 'seconds',
        'bpm': 'bpm',
        'beats por minuto': 'beats per minute',
        'tono': 'tone',
        'volumen': 'volume',
        'reverb': 'reverb',
        'delay': 'delay',
        'distorsi√≥n': 'distortion',
        'filtro': 'filter',
        'ecualizador': 'equalizer',
        'compresor': 'compressor',
        'limitador': 'limiter',
        'chorus': 'chorus',
        'flanger': 'flanger',
        'phaser': 'phaser',
        'wah': 'wah',
        'tremolo': 'tremolo',
        'vibrato': 'vibrato',
        'pitch': 'pitch',
        'modulaci√≥n': 'modulation',
        'arpegio': 'arpeggio',
        'escala': 'scale',
        'acorde': 'chord',
        'progresi√≥n': 'progression',
        'cadencia': 'cadence',
        'resoluci√≥n': 'resolution',
        'tensi√≥n': 'tension',
        'liberaci√≥n': 'release',
        'ataque': 'attack',
        'sustain': 'sustain',
        'decay': 'decay'
      };

      Object.entries(phraseTranslations).forEach(([spanish, english]) => {
        const regex = new RegExp(`\\b${spanish}\\b`, 'gi');
        translatedText = translatedText.replace(regex, english);
      });

      return translatedText;
    } catch (error) {
      console.error('Error translating:', error);
      return text; // Retornar texto original si hay error
    }
  };

  const handleGenerate = async () => {
    if (!creativePrompt.trim()) {
      alert('Por favor, describe la m√∫sica que quieres crear');
      return;
    }

    setIsGenerating(true);
    setCurrentStep(1);
    setProgress(0);

    try {
      // Traducir prompt al ingl√©s para mejor calidad en Suno
      const englishPrompt = await translateToEnglish(creativePrompt);
      const englishLyrics = lyrics ? await translateToEnglish(lyrics) : null;

      console.log('üéµ Prompt original:', creativePrompt);
      console.log('üåç Prompt traducido:', englishPrompt);
      if (lyrics) {
        console.log('üìù Letras originales:', lyrics);
        console.log('üåç Letras traducidas:', englishLyrics);
      }

      // Simular progreso realista
      const progressSteps = [
        { step: 1, message: 'Analizando tu estilo musical...', progress: 20 },
        { step: 2, message: 'Generando melod√≠a base...', progress: 40 },
        { step: 3, message: 'A√±adiendo instrumentos...', progress: 60 },
        { step: 4, message: 'Procesando audio...', progress: 80 },
        { step: 5, message: 'Finalizando...', progress: 100 }
      ];

      for (const step of progressSteps) {
        setCurrentStep(step.step);
        setProgress(step.progress);
        await new Promise(resolve => setTimeout(resolve, 1000));
      }

      // Generar audio real con prompt traducido al ingl√©s
      if (services?.webAudio) {
        // Usar el prompt creativo traducido como base
        let fullPrompt = englishPrompt;
        
        // A√±adir configuraciones t√©cnicas si no est√°n en el prompt
        if (!fullPrompt.toLowerCase().includes('bpm') && !fullPrompt.toLowerCase().includes('tempo')) {
          fullPrompt += ` at ${tempo} BPM`;
        }
        
        if (advancedSettings.key && !fullPrompt.toLowerCase().includes('key')) {
          fullPrompt += ` in ${advancedSettings.key} key`;
        }
        
        if (englishLyrics) {
          fullPrompt += `. Include these lyrics: "${englishLyrics}"`;
        } else if (!fullPrompt.toLowerCase().includes('instrumental')) {
          fullPrompt += '. Instrumental only';
        }
        
        const result = await services.webAudio.generateMusic(fullPrompt, {
          duration,
          tempo,
          key: advancedSettings.key,
          timeSignature: advancedSettings.timeSignature,
          reverb: advancedSettings.reverb,
          delay: advancedSettings.delay,
          distortion: advancedSettings.distortion,
          voiceStyle: voiceStyle !== 'none' ? voiceStyle : null
        });
        
        setGeneratedAudio(result);
      } else {
        // Modo demo
        setGeneratedAudio({
          audioUrl: '/demo-audio.mp3',
          title: 'Creative Track',
          duration: duration,
          quality: 'high'
        });
      }
    } catch (error) {
      console.error('Error generating music:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  const getStepMessage = () => {
    const messages = [
      'Analizando tu estilo musical...',
      'Generando melod√≠a base...',
      'A√±adiendo instrumentos...',
      'Procesando audio...',
      'Finalizando...'
    ];
    return messages[currentStep - 1] || 'Procesando...';
  };

  // Generar prompt inteligente
  const generateSmartPrompt = async (mode = 'random') => {
    setIsGeneratingPrompt(true);
    
    try {
      const smartPrompts = {
        random: [
          "Una canci√≥n √©pica con sintetizadores futuristas que evoque una batalla espacial",
          "M√∫sica melanc√≥lica con piano y cuerdas que hable de nostalgia y recuerdos perdidos",
          "Un ritmo ciberpunk con beats electr√≥nicos y voces distorsionadas",
          "Atm√≥sfera et√©rea con pads sint√©ticos y ecos que transporten a otro mundo",
          "M√∫sica industrial con sonidos met√°licos y ritmos agresivos",
          "Una balada ac√∫stica con guitarra y viol√≠n que toque el coraz√≥n",
          "S√≠ntesis retro con arpegios de los 80s y vocoder vintage",
          "Ambient espacial con drones y texturas que evoquen el cosmos"
        ],
        based_on_mood: [
          "Una canci√≥n que capture la esencia de la melancol√≠a con sintetizadores suaves",
          "M√∫sica energ√©tica que transmita euforia y alegr√≠a desbordante",
          "Atm√≥sfera misteriosa con sonidos inquietantes y ritmos hipn√≥ticos",
          "Una pieza tranquila que evoque paz y serenidad interior",
          "M√∫sica apasionada con instrumentos c√°lidos y ritmos envolventes"
        ],
        based_on_style: [
          "Una composici√≥n ciberpunk con sintetizadores agresivos y beats industriales",
          "M√∫sica retro-futurista que combine elementos vintage con sonidos modernos",
          "Atm√≥sfera apocal√≠ptica con drones distorsionados y ritmos ca√≥ticos",
          "Una pieza et√©rea con pads flotantes y ecos infinitos",
          "M√∫sica urbana que capture el ritmo de la ciudad nocturna"
        ]
      };

      let selectedPrompts = smartPrompts[mode] || smartPrompts.random;
      const randomPrompt = selectedPrompts[Math.floor(Math.random() * selectedPrompts.length)];
      
      // Simular delay de IA
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      setCreativePrompt(randomPrompt);
    } catch (error) {
      console.error('Error generating smart prompt:', error);
    } finally {
      setIsGeneratingPrompt(false);
    }
  };

  // Generar letras inteligentes
  const generateSmartLyrics = async (mode = 'narrative') => {
    setIsGeneratingLyrics(true);
    
    try {
      const narrativeThemes = {
        narrative: [
          {
            title: "La Resistencia Digital",
            lyrics: `En las calles de ne√≥n brillan los sue√±os rotos
Cada byte de esperanza se convierte en c√≥digo
Somos la resistencia, la voz de los silenciados
En este mundo digital, somos los condenados

La m√°quina nos vigila, pero no puede ver
Que en cada distorsi√≥n hay un coraz√≥n que late
Somos la m√∫sica que rompe las cadenas
La melod√≠a que libera las almas condenadas`
          },
          {
            title: "Nostalgia del Futuro",
            lyrics: `Recuerdo un tiempo que nunca existi√≥
Cuando los robots so√±aban con ser humanos
En las pantallas brillan memorias falsas
De un pasado que solo existe en mi coraz√≥n

El futuro lleg√≥ y se fue sin avisar
Dejando solo ecos de lo que pudo ser
En cada sinte suena una l√°grima
De un mundo que se perdi√≥ en la red`
          },
          {
            title: "Escape Virtual",
            lyrics: `Presiona Ctrl+Alt+Escape de la realidad
Donde los sue√±os se programan en c√≥digo
En esta matrix de ilusiones digitales
Solo la m√∫sica puede liberar mi alma

Cada beat es un latido de libertad
Cada nota una ventana hacia la verdad
En el ciberespacio de mi mente
La m√∫sica es mi √∫nica realidad`
          }
        ],
        random: [
          {
            title: "Fragments",
            lyrics: `Pieces of light in the darkness
Floating through time and space
Nothing is real, everything is possible
In this digital embrace`
          },
          {
            title: "Electric Dreams",
            lyrics: `Neon lights and electric nights
Dancing through the digital void
Every pixel tells a story
Of love that was never destroyed`
          },
          {
            title: "Synthetic Soul",
            lyrics: `I am machine, I am human
Binary code in my veins
Feeling emotions through circuits
Love that transcends the chains`
          }
        ],
        based_on_prompt: [
          {
            title: "Prompt Inspiration",
            lyrics: `Based on your musical vision
I weave words that dance with sound
Every note tells your story
In this digital playground`
          }
        ]
      };

      let selectedThemes = narrativeThemes[mode] || narrativeThemes.narrative;
      const randomTheme = selectedThemes[Math.floor(Math.random() * selectedThemes.length)];
      
      // Simular delay de IA
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      setLyrics(randomTheme.lyrics);
    } catch (error) {
      console.error('Error generating smart lyrics:', error);
    } finally {
      setIsGeneratingLyrics(false);
    }
  };

  return (
    <div className="intuitive-music-generator">
      <div className="generator-header">
        <h2>üéµ Generador Musical Intuitivo</h2>
        <p>Crea m√∫sica profesional en segundos con IA</p>
      </div>

      {!isGenerating ? (
        <div className="generator-form">
          {/* Paso 1: Prompt Creativo Principal */}
          <div className="form-section">
            <h3>1. Describe tu m√∫sica</h3>
            <div className="creative-prompt-section">
              <div className="prompt-input-container">
                <textarea
                  value={creativePrompt}
                  onChange={(e) => setCreativePrompt(e.target.value)}
                  placeholder="Describe la m√∫sica que quieres crear... Ejemplo: 'Una canci√≥n melanc√≥lica con sintetizadores vintage que evoque nostalgia de los 80s, con un ritmo lento y atm√≥sfera espacial'"
                  className="creative-prompt-input"
                  rows="4"
                />
                <div className="smart-prompt-buttons">
                  <button
                    className="smart-btn random"
                    onClick={() => generateSmartPrompt('random')}
                    disabled={isGeneratingPrompt}
                  >
                    <span className="btn-icon">üé≤</span>
                    <span className="btn-text">Random</span>
                  </button>
                  <button
                    className="smart-btn mood"
                    onClick={() => generateSmartPrompt('based_on_mood')}
                    disabled={isGeneratingPrompt}
                  >
                    <span className="btn-icon">üí≠</span>
                    <span className="btn-text">Por Emoci√≥n</span>
                  </button>
                  <button
                    className="smart-btn style"
                    onClick={() => generateSmartPrompt('based_on_style')}
                    disabled={isGeneratingPrompt}
                  >
                    <span className="btn-icon">üé®</span>
                    <span className="btn-text">Por Estilo</span>
                  </button>
                </div>
              </div>
              <div className="prompt-help">
                <p>üí° <strong>Tip:</strong> S√© espec√≠fico sobre emociones, instrumentos, atm√≥sfera, estilo, o cualquier detalle que tengas en mente.</p>
                <p>ü§ñ <strong>IA:</strong> Usa los botones para generar prompts inteligentes basados en diferentes enfoques creativos.</p>
                <p>üåç <strong>Traducci√≥n:</strong> Tu prompt se traduce autom√°ticamente al ingl√©s para obtener mejores resultados de Suno AI.</p>
              </div>
            </div>
          </div>

          {/* Inspiraciones Creativas */}
          <div className="form-section">
            <h3>2. Inspiraciones (opcional)</h3>
            <div className="inspiration-grid">
              {Object.entries(creativeInspirations).map(([category, data]) => (
                <div key={category} className="inspiration-category">
                  <h4>{data.title}</h4>
                  <div className="inspiration-tags">
                    {data.items.map((item, index) => (
                      <button
                        key={index}
                        className="inspiration-tag"
                        onClick={() => {
                          const newPrompt = creativePrompt ? 
                            `${creativePrompt}, ${item}` : 
                            item;
                          setCreativePrompt(newPrompt);
                        }}
                      >
                        {item}
                      </button>
                    ))}
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Paso 3: Configuraci√≥n T√©cnica */}
          <div className="form-section">
            <h3>3. Configuraci√≥n t√©cnica</h3>
            <div className="technical-controls">
              <div className="control-row">
                <div className="control-group">
                  <label>Tempo (BPM)</label>
                  <div className="tempo-control">
                    <input
                      type="range"
                      min="60"
                      max="200"
                      value={tempo}
                      onChange={(e) => setTempo(e.target.value)}
                      className="tempo-slider"
                    />
                    <span className="tempo-value">{tempo} BPM</span>
                  </div>
                </div>

                <div className="control-group">
                  <label>Duraci√≥n</label>
                  <select value={duration} onChange={(e) => setDuration(Number(e.target.value))}>
                    <option value={15}>15 segundos</option>
                    <option value={30}>30 segundos</option>
                    <option value={60}>1 minuto</option>
                    <option value={120}>2 minutos</option>
                    <option value={300}>5 minutos</option>
                  </select>
                </div>

                <div className="control-group">
                  <label>Tonalidad</label>
                  <select 
                    value={advancedSettings.key} 
                    onChange={(e) => setAdvancedSettings({...advancedSettings, key: e.target.value})}
                  >
                    <option value="C">C Mayor</option>
                    <option value="C#">C# Mayor</option>
                    <option value="D">D Mayor</option>
                    <option value="D#">D# Mayor</option>
                    <option value="E">E Mayor</option>
                    <option value="F">F Mayor</option>
                    <option value="F#">F# Mayor</option>
                    <option value="G">G Mayor</option>
                    <option value="G#">G# Mayor</option>
                    <option value="A">A Mayor</option>
                    <option value="A#">A# Mayor</option>
                    <option value="B">B Mayor</option>
                  </select>
                </div>
              </div>

              <div className="control-row">
                <div className="control-group">
                  <label>Reverb</label>
                  <div className="slider-control">
                    <input
                      type="range"
                      min="0"
                      max="1"
                      step="0.1"
                      value={advancedSettings.reverb}
                      onChange={(e) => setAdvancedSettings({...advancedSettings, reverb: parseFloat(e.target.value)})}
                      className="slider"
                    />
                    <span className="slider-value">{Math.round(advancedSettings.reverb * 100)}%</span>
                  </div>
                </div>

                <div className="control-group">
                  <label>Delay</label>
                  <div className="slider-control">
                    <input
                      type="range"
                      min="0"
                      max="1"
                      step="0.1"
                      value={advancedSettings.delay}
                      onChange={(e) => setAdvancedSettings({...advancedSettings, delay: parseFloat(e.target.value)})}
                      className="slider"
                    />
                    <span className="slider-value">{Math.round(advancedSettings.delay * 100)}%</span>
                  </div>
                </div>

                <div className="control-group">
                  <label>Distorsi√≥n</label>
                  <div className="slider-control">
                    <input
                      type="range"
                      min="0"
                      max="1"
                      step="0.1"
                      value={advancedSettings.distortion}
                      onChange={(e) => setAdvancedSettings({...advancedSettings, distortion: parseFloat(e.target.value)})}
                      className="slider"
                    />
                    <span className="slider-value">{Math.round(advancedSettings.distortion * 100)}%</span>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Paso 4: Letras (Opcional) */}
          <div className="form-section">
            <h3>4. Letras (opcional)</h3>
            <div className="lyrics-section">
              <div className="lyrics-input-container">
                <textarea
                  value={lyrics}
                  onChange={(e) => setLyrics(e.target.value)}
                  placeholder="Escribe tus letras aqu√≠... (deja vac√≠o para instrumental)"
                  className="lyrics-input"
                  rows="6"
                />
                <div className="smart-lyrics-buttons">
                  <button
                    className="smart-btn instrumental"
                    onClick={() => setLyrics('')}
                    disabled={isGeneratingLyrics}
                  >
                    <span className="btn-icon">üéµ</span>
                    <span className="btn-text">Solo Instrumental</span>
                  </button>
                  <button
                    className="smart-btn narrative"
                    onClick={() => generateSmartLyrics('narrative')}
                    disabled={isGeneratingLyrics}
                  >
                    <span className="btn-icon">üìñ</span>
                    <span className="btn-text">Narrativa</span>
                  </button>
                  <button
                    className="smart-btn random"
                    onClick={() => generateSmartLyrics('random')}
                    disabled={isGeneratingLyrics}
                  >
                    <span className="btn-icon">üé≤</span>
                    <span className="btn-text">Random</span>
                  </button>
                  <button
                    className="smart-btn based-on-prompt"
                    onClick={() => generateSmartLyrics('based_on_prompt')}
                    disabled={isGeneratingLyrics || !creativePrompt.trim()}
                  >
                    <span className="btn-icon">üîó</span>
                    <span className="btn-text">Basado en Prompt</span>
                  </button>
                </div>
              </div>
              <div className="lyrics-help">
                <p>üìù <strong>Letras Inteligentes:</strong> Genera letras coherentes con tem√°tica cyberpunk y narrativa profunda.</p>
                <p>üé≠ <strong>Narrativa:</strong> Letras con historia y coherencia tem√°tica. <strong>Random:</strong> Letras experimentales. <strong>Basado en Prompt:</strong> Letras que complementen tu descripci√≥n musical.</p>
                <p>üåç <strong>Traducci√≥n:</strong> Las letras se traducen autom√°ticamente al ingl√©s para mejor calidad vocal en Suno AI.</p>
              </div>
            </div>
          </div>

          {/* Bot√≥n de Generaci√≥n */}
          <div className="generate-section">
            <button
              className="generate-btn"
              onClick={handleGenerate}
              disabled={isGenerating || !creativePrompt.trim()}
            >
              <span className="btn-icon">üéµ</span>
              <span className="btn-text">Generar M√∫sica</span>
              <span className="btn-subtext">Tu creatividad + IA = Arte √∫nico</span>
            </button>
            {!creativePrompt.trim() && (
              <p className="prompt-required">‚úçÔ∏è Escribe una descripci√≥n de tu m√∫sica para comenzar</p>
            )}
          </div>
        </div>
      ) : (
        <div className="generation-progress">
          <div className="progress-header">
            <h3>Generando tu m√∫sica...</h3>
            <p>{getStepMessage()}</p>
          </div>
          
          <div className="progress-container">
            <div className="progress-bar">
              <div 
                className="progress-fill" 
                style={{ width: `${progress}%` }}
              ></div>
            </div>
            <span className="progress-text">{progress}%</span>
          </div>

          <div className="progress-steps">
            {[1, 2, 3, 4, 5].map(step => (
              <div 
                key={step} 
                className={`progress-step ${currentStep >= step ? 'active' : ''} ${currentStep === step ? 'current' : ''}`}
              >
                <div className="step-number">{step}</div>
                <div className="step-line"></div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Resultado */}
      {generatedAudio && (
        <div className="generation-result">
          <h3>üéâ ¬°Tu m√∫sica est√° lista!</h3>
          <div className="audio-player">
            <audio controls src={generatedAudio.audioUrl} />
          </div>
          <div className="result-actions">
            <button className="action-btn download">
              <span>üì•</span> Descargar
            </button>
            <button className="action-btn share">
              <span>üîó</span> Compartir
            </button>
            <button className="action-btn regenerate">
              <span>üîÑ</span> Regenerar
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default IntuitiveMusicGenerator;
