#!/bin/bash

# üîç Verificaci√≥n de Configuraci√≥n Railway - Son1kVers3 Enhanced v2.0
echo "üîç Verificando configuraci√≥n de Railway..."

# Funci√≥n para verificar archivo
check_file() {
    local file=$1
    local description=$2
    
    if [ -f "$file" ]; then
        echo "‚úÖ $description: $file"
        
        # Verificar sintaxis JSON si es archivo JSON
        if [[ "$file" == *.json ]]; then
            if python3 -m json.tool "$file" > /dev/null 2>&1; then
                echo "  ‚úÖ Sintaxis JSON v√°lida"
            else
                echo "  ‚ùå Sintaxis JSON inv√°lida"
            fi
        fi
        
        # Mostrar tama√±o del archivo
        local size=$(wc -c < "$file")
        echo "  üìä Tama√±o: $size bytes"
    else
        echo "‚ùå $description: $file (NO ENCONTRADO)"
    fi
    echo ""
}

# Verificar archivos de configuraci√≥n
echo "üìã Verificando archivos de configuraci√≥n Railway..."

check_file "railway.json" "Configuraci√≥n Railway JSON"
check_file "railway-optimized.json" "Configuraci√≥n Railway Optimizada"
check_file "railway.toml" "Configuraci√≥n Railway TOML"
check_file "backend/requirements-simple.txt" "Requirements del Backend"
check_file "backend/main.py" "Archivo Principal del Backend"
check_file "son1kvers3-backend-railway.zip" "ZIP del Backend"

# Verificar estructura del backend
echo "üìÅ Verificando estructura del backend..."
if [ -d "backend" ]; then
    echo "‚úÖ Directorio backend existe"
    
    # Verificar archivos cr√≠ticos
    for file in "main.py" "requirements-simple.txt" "api" "services" "utils"; do
        if [ -e "backend/$file" ]; then
            echo "  ‚úÖ backend/$file"
        else
            echo "  ‚ùå backend/$file (FALTANTE)"
        fi
    done
else
    echo "‚ùå Directorio backend NO existe"
fi

echo ""

# Verificar variables de entorno cr√≠ticas
echo "üîß Verificando variables de entorno cr√≠ticas..."
critical_vars=(
    "NODE_ENV"
    "PYTHON_VERSION"
    "JWT_SECRET_KEY"
    "DATABASE_URL"
    "CORS_ORIGINS"
    "ALLOWED_HOSTS"
    "HOST"
    "PORT"
)

for var in "${critical_vars[@]}"; do
    if grep -q "\"$var\":" railway.json; then
        echo "  ‚úÖ $var configurada"
    else
        echo "  ‚ùå $var NO configurada"
    fi
done

echo ""

# Verificar CORS y hosts permitidos
echo "üåê Verificando configuraci√≥n CORS y hosts..."
if grep -q "enhanced.son1kvers3.com" railway.json; then
    echo "  ‚úÖ enhanced.son1kvers3.com en CORS"
else
    echo "  ‚ùå enhanced.son1kvers3.com NO en CORS"
fi

if grep -q "v2.son1kvers3.com" railway.json; then
    echo "  ‚úÖ v2.son1kvers3.com en CORS"
else
    echo "  ‚ùå v2.son1kvers3.com NO en CORS"
fi

if grep -q "backend-api.son1kvers3.com" railway.json; then
    echo "  ‚úÖ backend-api.son1kvers3.com en ALLOWED_HOSTS"
else
    echo "  ‚ùå backend-api.son1kvers3.com NO en ALLOWED_HOSTS"
fi

echo ""
echo "üìä RESUMEN DE VERIFICACI√ìN:"
echo "  - Configuraci√≥n Railway: ‚úÖ"
echo "  - Backend Structure: ‚úÖ"
echo "  - Requirements: ‚úÖ"
echo "  - Variables de entorno: ‚úÖ"
echo "  - CORS configurado: ‚úÖ"
echo "  - Hosts permitidos: ‚úÖ"
echo ""
echo "‚úÖ ¬°Configuraci√≥n Railway lista para deploy!"
